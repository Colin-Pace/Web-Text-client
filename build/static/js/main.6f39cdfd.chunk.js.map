{"version":3,"sources":["landing/landing.js","registration/registration.js","note/note.js","folderMenu/folderMenu.js","folderNotePair/folderNotePair.js","tableTop/tableTop.js","account/account.js","App.js","index.js"],"names":["Landing","props","onSubmitForm","bind","spinner","React","createRef","unsuccessfulLogin","e","preventDefault","items","push","target","nameToAdd","value","pwToAdd","this","onAddItems","current","style","display","undefined","className","onSubmit","type","placeholder","name","aria-required","aria-label","aria-describedby","to","id","ref","Component","Registration","state","message","handleChange","needsLower","needsUpper","needsSpecial","setState","tempMessage","test","includes","onChange","Note","noteName","noteText","console","log","noteDetail","FolderMenu","listenEditFolder","listenDeleteFolder","listenCreateNote","folderID","deleteFolder","createNote","href","onClick","FolderNotePair","selectedFolderID","folderIDToEdit","noteIDToEdit","handleFolderLink","handleNoteLink","handleEditFolderClick","listenEditFolderEnter","parseInt","getAttribute","noteClicked","noteClickedFolder","onNoteClick","newFolderName","folderEnter","editFolder","foldersAndNotes","item","length","data-folderID","itr","data-noteid","data-notefolder","TableTop","folderIDForNoteCreation","selectedNoteID","noteNameIDToEdit","handleSubmit","onButtonClick","combineFolderIDNoteDetail","handleNoteTextLink","handleNoteNameLink","listenEditNote","listenDeleteNote","listenEditNoteName","listenForTableTopReady","data","folder","createFolder","onLogoutClick","foldersAndNotesToLoad","noteNameToLoad","noteToLoad","valueTB","noteID","noteEnter","editNote","noteNameEnter","editNoteName","idAndDetail","deleteNote","noteContent","Account","baseURL","App","password","authToken","accountDeleted","registrationMessage","notesToView","folderCreated","folderEdited","folderDeleted","noteCreated","noteViewed","notes","noteEdited","noteNameEdited","noteDeleted","userID","handleLogin","handleRegistration","handleAccount","handleTableTopReady","handleCreateFolder","handleEditFolder","handleDeleteFolder","handleCreateNote","handleViewNote","handleEditNote","handleEditNoteName","handleDeleteNote","handleLogout","userName","window","btoa","makeBasicAuthToken","url","postBody","options","method","body","JSON","stringify","headers","fetch","then","res","ok","history","alert","Error","catch","err","folderName","json","noteToView","path","exact","render","viewNote","withRouter","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.6f39cdfd.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nimport './landing.css';\n\nimport { Link } from 'react-router-dom';\n\n\n\nexport default class Landing extends React.Component {\n\n  constructor(props) {\n\n    super(props);\n\n    this.onSubmitForm = this.onSubmitForm.bind(this);\n\n    this.spinner = React.createRef();\n\n    this.unsuccessfulLogin = this.props.unsuccessfulLogin;\n\n  }\n\n\n  onSubmitForm(e) {\n\n    e.preventDefault();\n\n    let items = [];\n\n    items.push(e.target.nameToAdd.value);\n\n    items.push(e.target.pwToAdd.value);\n\n    e.target.nameToAdd.value = '';\n\n    e.target.pwToAdd.value = '';\n\n    this.props.onAddItems(items);\n\n    const spinner = this.spinner.current;\n\n    spinner.style.display = 'initial';\n\n  }\n\n\n  render() {\n\n    if (this.props.unsuccessfulLogin !== undefined) {\n\n      const spinner = this.spinner.current;\n\n      if (spinner !== null) spinner.style.display = 'none';\n\n    }\n\n    return (\n\n      <div>\n\n        <div className = \"loginNavbar\">\n\n          <form\n\n            onSubmit = { this.onSubmitForm }\n            className = \"nonMobileForm\"\n\n          >\n\n            <div className = \"form\">\n\n              <input\n\n                type = \"text\"\n                placeholder = 'User Name'\n                name = 'nameToAdd'\n                className = \"inputOne\"\n                aria-required=\"true\"\n                aria-label=\"User name for login\"\n                aria-describedby=\"landingInstructions\"\n\n              />\n\n              <input\n\n                type = \"text\"\n                placeholder = 'Password123!@#'\n                name = 'pwToAdd'\n                className = \"inputTwo\"\n                aria-required=\"true\"\n                aria-label=\"Password for login\"\n                aria-describedby=\"landingInstructions\"\n\n              />\n\n              <button type = 'submit'>Enter</button>\n\n            </div>\n\n          </form>\n\n          <Link\n\n            to = '/registration'\n            className = 'registration'\n\n          >\n\n            <span className = \"regText\">Registration</span>\n\n          </Link>\n\n        </div>\n\n        <div className = \"page\">\n\n          <h1>Web Text</h1>\n\n          <p\n\n            className = \"instructions\"\n            id = \"landingInstructions\"\n\n          >Application instructions: If you have an account, please enter your name and password to go to the table top. There you can enter the name of a folder, select created folders and make posts for them, select posts, and enter post text. If you do not have an account, go to registration to create one. For a demonstration, try the user name \"User Name\" with the password \"Password123!\".</p>\n\n          <div\n\n            id = \"landingLoader\"\n            ref = { this.spinner }\n\n          ></div>\n\n          <form\n\n            onSubmit = { this.onSubmitForm }\n            className = \"mobileLandingForm\"\n\n          >\n\n            <div className = \"mobileInputs\">\n\n              <input\n\n                type = \"text\"\n                placeholder = 'User Name'\n                name = 'nameToAdd'\n                className = \"inputOne\"\n                aria-required=\"true\"\n                aria-label=\"User name for mobile login\"\n                aria-describedby=\"landingInstructions\"\n\n              />\n\n              <input\n\n                type = \"text\"\n                placeholder = 'Password123!@#'\n                name = 'pwToAdd'\n                className = \"inputTwo\"\n                aria-required=\"true\"\n                aria-label=\"Password for mobile login\"\n                aria-describedby=\"landingInstructions\"\n\n              />\n\n              <br/>\n\n              <button type = 'submit'>Enter</button>\n\n            </div>\n\n          </form>\n\n        </div>\n\n      </div>\n\n    );\n  }\n}\n","import React from 'react';\n\nimport { Link } from 'react-router-dom';\n\nimport Landing from '../landing/landing.js';\n\nimport './registration.css';\n\n\n\n\nexport default class Registration extends React.Component {\n\n  constructor(props) {\n\n    super(props);\n\n    this.onSubmitForm = this.onSubmitForm.bind(this);\n\n    this.state = {\n\n      value: '',\n\n      message: []\n\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n\n  }\n\n  handleChange(e) {\n\n    const REGEX_LOWER =/(?=.*[a-z])[\\S]+/;\n\n    const needsLower = \"The password needs a lower case letter.\"\n\n    const REGEX_UPPER = /(?=.*[A-Z])[\\S]+/;\n\n    const needsUpper = \"The password needs an upper case letter.\"\n\n    const REGEX_NUMBER = /(?=.*[0-9])[\\S]+/;\n\n    const needsNumber = \"The password needs a number.\"\n\n    const REGEX_SPECIAL =/(?=.*[!@#\\$%\\^&])[\\S]+/;\n\n    const needsSpecial = \"The password needs a special character.\"\n\n    this.setState( { value: e.target.value } );\n\n    //console.log(e.target.value);\n\n    let tempMessage = [];\n\n    if (!REGEX_LOWER.test(e.target.value) && (!tempMessage.includes(needsLower))) {\n\n      tempMessage.push(needsLower);\n\n    }\n\n    if (!REGEX_UPPER.test(e.target.value) && (!tempMessage.includes(needsUpper))) {\n\n      tempMessage.push(needsUpper);\n\n    }\n\n    if (!REGEX_NUMBER.test(e.target.value) && (!tempMessage.includes(needsNumber))) {\n\n      tempMessage.push(needsNumber);\n\n    }\n\n    if (!REGEX_SPECIAL.test(e.target.value) && (!tempMessage.includes(needsSpecial))) {\n\n      tempMessage.push(needsSpecial);\n\n    }\n\n    this.setState( { message: tempMessage } );\n\n  }\n\n\n  onSubmitForm(e) {\n\n    e.preventDefault();\n\n    let items = [];\n\n    items.push(e.target.nameToAdd.value);\n\n    items.push(e.target.pwToAdd.value);\n\n    e.target.nameToAdd.value = '';\n\n    e.target.pwToAdd.value = '';\n\n    this.props.onAddItems(items);\n\n  }\n\n\n  render() {\n\n    return (\n\n      <div >\n\n        <div className = \"regNavbar\" >\n\n          <form\n\n            onSubmit = { this.onSubmitForm }\n            className = \"regNonMobileForm\"\n\n          >\n\n            <div className = \"regForm\">\n\n              <input\n\n                type = \"text\"\n                placeholder = 'User Name'\n                name = 'nameToAdd'\n                className = \"regInputOne\"\n                aria-required=\"true\"\n                aria-label=\"User name for registration\"\n                aria-describedby=\"registrationInstructions\"\n\n              />\n\n              <input\n\n                type = \"text\"\n                placeholder = 'Password123!@#'\n                name = 'pwToAdd'\n                className = \"regInputTwo\"\n                aria-required=\"true\"\n                aria-label=\"Password for registration\"\n                aria-describedby=\"registrationInstructions\"\n                value = { this.state.value }\n                onChange = { this.handleChange }\n\n              />\n\n              <button type = 'submit'>Enter</button>\n\n            </div>\n\n        </form>\n\n          <Link\n\n            to = '/landing'\n            className = 'landingLink'\n\n          >\n\n            <span className = \"landingLinkText\">Login</span>\n\n          </Link>\n\n        </div>\n\n        <div>\n\n          { this.state.message }\n\n        </div>\n\n        <div className = \"regPage\">\n\n          <h1 className = \"regHeadingOne\">Registration</h1>\n\n          <p\n\n            className = \"regInstructions\"\n            id = \"registrationInstructions\"\n\n          >In order to register, please enter a user name and a password. The password should be longer than eight characters long. Also it must contain one upper case and one lower case character, one number, and a special character.</p>\n\n          <form onSubmit = { this.onSubmitForm } >\n\n            <div className = \"regMobileInputs\">\n\n              <input\n\n                type = \"text\"\n                placeholder = 'User Name'\n                name = 'nameToAdd'\n                className = \"regInputOne\"\n                aria-required=\"true\"\n                aria-label=\"User name for mobile registration\"\n                aria-describedby=\"registrationInstructions\"\n\n              />\n\n              <input\n\n                type = \"text\"\n                placeholder = 'Password123!@#'\n                name = 'pwToAdd'\n                className = \"regInputTwo\"\n                aria-required=\"true\"\n                aria-label=\"Password for mobile registration\"\n                aria-describedby=\"registrationInstructions\"\n\n              />\n\n              <button\n\n                type = 'submit'\n                className = \"regButton\"\n\n              >Enter</button>\n\n            </div>\n\n        </form>\n\n        </div>\n\n      </div>\n    );\n  }\n}\n","import React from 'react';\n\nimport './note.css';\n\n\n\nexport default class Note extends React.Component {\n\n  constructor(props) {\n\n    super(props);\n\n    this.onSubmitForm = this.onSubmitForm.bind(this);\n\n  }\n\n\n  onSubmitForm(e) {\n\n    e.preventDefault();\n\n    let items = [];\n\n    if (e.target.noteName.value === \"\" || e.target.noteText.value === \"\") {\n\n      console.log(\"Cannot create an empty note\");\n\n    } else {\n\n      items.push(e.target.noteName.value);\n\n      items.push(e.target.noteText.value);\n\n      e.target.noteName.value = \"\";\n\n      e.target.noteText.value = \"\";\n\n      this.props.noteDetail(items);\n\n    }\n\n  }\n\n\n  render() {\n\n    return (\n\n      <div>\n\n        <form onSubmit = { this.onSubmitForm } >\n\n          <span className = \"noteForm\">\n\n            <input\n\n              type = \"text\"\n              placeholder = 'Weather'\n              name = 'noteName'\n              className = \"noteTitle\"\n              aria-required=\"true\"\n              aria-label=\"Post name input\"\n\n            / >\n \n            <textarea\n\n                name = \"noteText\"\n                placeholder = 'Enter note text here'\n\n            >\n\n            </textarea>\n\n            < input\n\n                type = \"submit\"\n                className = \"submit\"\n                aria-required=\"true\"\n                aria-label=\"Post name input button\"\n\n            / >\n\n          </span>\n\n        </form>\n\n      </div>\n\n    )\n  }\n}\n","import React from 'react';\n\nimport './folderMenu.css'\n\n\n\nexport default class FolderMenu extends React.Component {\n\n  constructor(props) {\n\n    super(props);\n\n    this.listenEditFolder = this.listenEditFolder.bind(this);\n\n    this.listenDeleteFolder = this.listenDeleteFolder.bind(this);\n\n    this.listenCreateNote = this.listenCreateNote.bind(this);\n\n  }\n\n\n  listenEditFolder(e) {\n\n    e.preventDefault();\n\n    this.props.listenEditFolder(this.props.folderID);\n\n  }\n\n\n  listenDeleteFolder(e) {\n\n    e.preventDefault();\n\n    this.props.deleteFolder(this.props.folderID);\n\n  }\n\n\n  listenCreateNote(e) {\n\n    e.preventDefault();\n\n    this.props.createNote(this.props.folderID);\n\n  }\n\n\n  render() {\n\n    return (\n\n      <div>\n\n        <a\n            href = \"#\"\n            onClick = { this.listenEditFolder }\n            className = \"edit\"\n        >\n\n          <span className = \"editFolderText\">Edit folder</span>\n\n        </a>\n\n        <span> | </span>\n\n        <a\n            href = \"#\"\n            onClick = { this.listenDeleteFolder }\n            className = \"delete\"\n        >\n\n          <span className = \"deleteFolderText\">Delete folder</span>\n\n        </a>\n\n        <span> | </span>\n\n        <a\n            href = \"#\"\n            onClick = { this.listenCreateNote }\n            className = \"create\"\n        >\n\n        <span className = \"createNoteText\">Create post</span>\n\n        </a>\n\n      </div>\n\n    )\n  }\n}\n","import React from 'react';\n\nimport FolderMenu from '../folderMenu/folderMenu.js';\n\nimport './folderNotePair.css';\n\n\n\nexport default class FolderNotePair extends React.Component {\n\n  constructor(props) {\n\n    super(props);\n\n    this.state = {\n\n      selectedFolderID: null,\n\n      folderIDToEdit: null,\n\n      noteIDToEdit: null\n\n    }\n\n    this.handleFolderLink = this.handleFolderLink.bind(this);\n\n    this.handleNoteLink = this.handleNoteLink.bind(this);\n\n    this.handleEditFolderClick = this.handleEditFolderClick.bind(this);\n\n    this.listenEditFolderEnter = this.listenEditFolderEnter.bind(this);\n\n    this.createNote = this.createNote.bind(this);\n\n\n  }\n\n  createNote(folderID) {\n\n    this.setState({selectedFolderID: null});\n\n    this.props.createNote(folderID);\n  }\n\n\n  handleEditFolderClick(folderID) {\n\n    this.setState({ folderIDToEdit: folderID })\n\n  }\n\n\n  handleFolderLink(e) {\n\n    e.preventDefault();\n\n    let folderID = parseInt(e.target.getAttribute( 'data-folderid' ));\n\n    this.setState({ selectedFolderID: folderID });\n\n  }\n\n\n  handleNoteLink(e) {\n\n    e.preventDefault();\n\n    let noteClicked = parseInt(e.target.getAttribute( 'data-noteid' ));\n\n    let noteClickedFolder = e.target.getAttribute('data-notefolder');\n\n    this.props.onNoteClick(noteClicked, noteClickedFolder);\n\n  }\n\n\n  listenEditFolderEnter(e) {\n\n    e.preventDefault();\n\n    let newFolderName = e.target.folderEnter.value;\n\n    let folderIDToEdit = this.state.folderIDToEdit;\n\n    e.target.folderEnter.value = '';\n\n    this.props.editFolder(newFolderName, folderIDToEdit);\n\n    this.setState({ folderIDToEdit: null });\n\n  }\n\n\n  render() {\n\n    let foldersAndNotes = [];\n\n    let items = this.props.items;\n\n    for (let item in items) {\n\n      if (items[item]['folderName'].length === 0) {\n\n        continue;\n\n      } else {\n\n        foldersAndNotes.push(\n\n            <li>\n\n              <div className = \"folderAndNotes\">\n\n              {\n                  this.state.folderIDToEdit === items[item]['folderID'] ? (\n\n                    <form onSubmit = { this.listenEditFolderEnter } >\n\n                      <input\n\n                        type = \"text\"\n                        name = \"folderEnter\"\n                        placeholder = { items[item]['folderName'] }\n                        aria-required=\"true\"\n                        aria-label=\"Edit folder name\"\n\n                      / >\n\n                      <input type=\"submit\" style = { { display: \"none\" } } / >\n\n                    </form>\n\n                  ) : (\n\n                    < a href = \"#\"\n\n                      onClick = { this.handleFolderLink }\n                      data-folderID = { items[item]['folderID'] }\n                      className = \"folderName\">\n\n                        { items[item]['folderName'] }\n\n                    </ a >\n                  )\n\n              }\n\n              {\n                this.state.folderIDToEdit === null &&\n\n                this.state.selectedFolderID === items[item]['folderID'] ? (\n\n\n                  < FolderMenu\n\n                    folderID = { items[item]['folderID'] } deleteFolder = { this.props.deleteFolder }\n                    listenEditFolder = { this.handleEditFolderClick }\n                    createNote = { this.createNote }\n\n                  / >\n\n                ) :\n\n                (\n                  <span>\n                  </span>\n                )\n\n              }\n              </div>\n\n            </li>\n\n        )\n\n        for (let itr = 0; itr < items[item]['notes'].length; itr++) {\n\n          if (items[item]['notes'][itr]['noteID'] !== null) {\n\n            foldersAndNotes.push(\n\n              < li className = \"note\" >\n\n                {\n\n                    < a href = \"#\"\n\n                      onClick = { this.handleNoteLink }\n                      data-noteid = { items[item]['notes'][itr]['noteID'] }\n                      data-notefolder = { items[item]['notes'][itr]['noteFolder'] }\n                      className = \"notes\"\n\n                    >\n\n                        { items[item]['notes'][itr]['noteName'] }\n\n                    < / a >\n\n                }\n\n              </li>\n\n            )\n          }\n        }\n      }\n    }\n\n\n    return (\n\n      <div>\n\n        < ul className = \"listStyle\" >\n\n          { foldersAndNotes }\n\n        < / ul >\n\n      </div>\n    )\n  }\n}\n","import React from 'react';\n\nimport { Link } from 'react-router-dom';\n\nimport Note from '../note/note.js';\n\nimport FolderNotePair from '../folderNotePair/folderNotePair.js';\n\nimport './tableTop.css';\n\n\n\nexport default class TableTop extends React.Component {\n\n  constructor(props) {\n\n    super(props);\n\n    this.state = {\n\n      folderIDForNoteCreation: null,\n\n      selectedNoteID: null,\n\n      noteIDToEdit: null,\n\n      noteNameIDToEdit: null,\n\n      value: \"\"\n    }\n\n    this.editFolder = this.editFolder.bind(this);\n\n    this.deleteFolder = this.deleteFolder.bind(this);\n\n    this.createNote = this.createNote.bind(this);\n\n    this.handleChange = this.handleChange.bind(this);\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n\n    this.onButtonClick = this.onButtonClick.bind(this);\n\n    this.onNoteClick = this.onNoteClick.bind(this);\n\n    this.combineFolderIDNoteDetail = this.combineFolderIDNoteDetail.bind(this);\n\n    this.handleNoteTextLink = this.handleNoteTextLink.bind(this);\n\n    this.handleNoteNameLink = this.handleNoteNameLink.bind(this);\n\n    this.listenEditNote = this.listenEditNote.bind(this);\n\n    this.listenDeleteNote = this.listenDeleteNote.bind(this);\n\n    this.listenEditNoteName = this.listenEditNoteName.bind(this);\n  }\n\n\n  componentDidMount() {\n\n    this.props.listenForTableTopReady();\n\n  }\n\n\n  handleChange(e) {\n\n    this.setState( { value: e.target.value, folderIDForNoteCreation: null } ) ;\n\n  }\n\n\n  handleSubmit(e) {\n\n    e.preventDefault();\n\n    let data = [];\n\n    data.push(e.target.folder.value);\n\n    e.target.folder.value = '';\n\n    this.props.createFolder(data);\n\n    this.setState( { folderIDForNoteCreation: null } ) ;\n\n  }\n\n\n  editFolder(newFolderName, folderIDToEdit) {\n\n    this.setState( { folderIDForNoteCreation: null } ) ;\n\n    this.props.editFolder(newFolderName, folderIDToEdit);\n\n  }\n\n\n  deleteFolder(folderID) {\n\n    this.setState( {folderIDForNoteCreation: null, selectedNoteID: null } ) ;\n\n    this.props.deleteFolder(folderID);\n\n  }\n\n\n  onButtonClick(e) {\n\n    e.preventDefault();\n\n    this.props.onLogoutClick();\n\n    this.setState( { folderIDForNoteCreation: null } ) ;\n\n  }\n\n\n  createNote(folderID) {\n\n    this.setState( { folderIDForNoteCreation: folderID, selectedNoteID: null } );\n\n  }\n\n\n  onNoteClick(noteClicked, noteClickedFolder) {\n\n    this.setState({\n\n      selectedNoteID: noteClicked,\n\n      folderIDForNoteCreation: null,\n\n    })\n  }\n\n\n  noteName() {\n\n    let data = this.props.foldersAndNotesToLoad;\n\n    let noteNameToLoad = [];\n\n    if (data === undefined || data[0] === undefined) {\n\n      return null;\n\n    }\n\n    for (let folder in data) {\n\n      for (let itr in data[folder][ 'notes' ]) {\n\n        if (data[folder][ 'notes' ][itr][ 'noteID' ] === this.state.selectedNoteID && this.state.selectedNoteID !== null) {\n\n          noteNameToLoad.push(\n\n            <div>\n\n              {\n\n                this.state.noteNameIDToEdit === data[folder][ 'notes' ][itr][ 'noteID' ] ? (\n\n                  <form onSubmit = { this.handleNoteNameLink } >\n\n                    <input\n\n                      type = \"text\"\n                      name = \"noteNameEnter\"\n                      placeholder = { data[folder][ 'notes' ][itr][ 'noteName' ] }\n                      className = \"postNameLink\"\n                      aria-required=\"true\"\n                      aria-label=\"Edit post name \"\n\n                    / >\n\n                    <input\n\n                        type = \"submit\"\n                        aria-required=\"true\"\n                        aria-label=\"Edit post name keyboard enter\"\n                        style = { { display: \"none\" } }\n\n                    / >\n\n                  </form>\n\n                ) : (\n\n                  < a href = \"#\"\n\n                    onClick = { this.listenEditNoteName }\n                    data-noteid = { data[folder][ 'notes' ][itr][ 'noteID' ] }\n                    data-notefolder = { data[folder][ 'notes' ][itr][ 'noteFolder' ] }\n                    className = \"noteView\"\n\n                  >\n\n                    { data[folder][ 'notes' ][itr][ 'noteName' ] }\n\n                  </a>\n\n                )\n              }\n\n            </div>\n          )\n        }\n      }\n\n    }\n\n    return noteNameToLoad;\n  }\n\n\n  noteContent() {\n\n    let data = this.props.foldersAndNotesToLoad;\n\n    let noteToLoad = [];\n\n    if (data === undefined || data[0] === undefined) {\n\n      return null;\n\n    }\n\n    for (let folder in data) {\n\n      for (let itr in data[folder][ 'notes' ]) {\n\n        if (data[folder][ 'notes' ][itr][ 'noteID' ] === this.state.selectedNoteID && this.state.selectedNoteID !== null) {\n\n          noteToLoad.push(\n\n            <p>\n\n              {\n\n                this.state.noteIDToEdit === data[folder][ 'notes' ][itr][ 'noteID' ] ? (\n\n                  <form onSubmit = { this.handleNoteTextLink } >\n\n                    <textarea\n\n                      type = \"text\"\n                      name = \"noteEnter\"\n                      placeholder = { data[folder][ 'notes' ][itr][ 'noteText' ] }\n                      value = { this.state.value }\n                      onChange = { this.handleChange }\n\n                    / >\n\n                    <br/>\n\n                    <input\n\n                      type = \"submit\"\n                      className = \"noteEnterButton\"\n                      aria-required=\"true\"\n                      aria-label=\"Edit post text\"\n\n                    / >\n\n                  </form>\n\n                ) : (\n\n                  <div className = \"noteDisplayed\">\n\n                    < a href = \"#\"\n\n                      onClick = { this.listenEditNote }\n                      data-noteid = { data[folder][ 'notes' ][itr][ 'noteID' ] }\n                      data-notefolder = { data[folder][ 'notes' ][itr][ 'noteFolder' ] }\n                      className = \"noteTextView\"\n\n                    >\n\n                      { data[folder][ 'notes' ][itr][ 'noteText' ] }\n\n                    </a>\n\n                    <div className = \"postDeleteLink\">\n\n                      < a href = \"#\"\n\n                        onClick = { this.listenDeleteNote }\n                        data-noteid = { data[folder][ 'notes' ][itr][ 'noteID' ] }\n                        className = \"noteDelete\"\n\n                      >\n\n                      Delete note\n\n                      </a>\n\n                    </div>\n\n                  </div>\n\n                )\n              }\n\n            </p>\n          )\n        }\n      }\n\n    }\n\n    return noteToLoad;\n  }\n\n\n\n  listenEditNote(e) {\n\n    e.preventDefault();\n\n    let noteID = parseInt(e.target.getAttribute( 'data-noteid' ));\n\n    let data = this.props.foldersAndNotesToLoad;\n\n    let valueTB;\n\n    for (let folder in data) {\n\n      for (let itr in data[folder][ 'notes' ]) {\n\n        if (noteID === data[folder][ 'notes' ][itr][ 'noteID' ]) {\n\n          valueTB = data[folder][ 'notes' ][itr][ 'noteText' ];\n        }\n      }\n    }\n\n    this.setState( { noteIDToEdit: noteID, value: valueTB } )\n\n  }\n\n\n  listenEditNoteName(e) {\n\n    e.preventDefault();\n\n    let noteID = parseInt(e.target.getAttribute( 'data-noteid' ));\n\n    this.setState( {noteNameIDToEdit: noteID } )\n\n  }\n\n\n  handleNoteTextLink(e) {\n\n    e.preventDefault();\n\n    let noteText = e.target.noteEnter.value;\n\n    e.target.noteEnter.value = '';\n\n    this.props.editNote(noteText, this.state.noteIDToEdit);\n\n    this.setState( { noteIDToEdit: null } );\n\n  }\n\n\n  handleNoteNameLink(e) {\n\n    e.preventDefault();\n\n    let noteName = e.target.noteNameEnter.value;\n\n    e.target.noteNameEnter.value = '';\n\n    this.props.editNoteName(noteName, this.state.noteNameIDToEdit);\n\n    this.setState( { noteNameIDToEdit: null } );\n\n  }\n\n  combineFolderIDNoteDetail(noteDetail) {\n\n    if (this.state.folderIDForNoteCreation !== null) {\n\n      let idAndDetail = [this.state.folderIDForNoteCreation, noteDetail];\n\n      this.props.noteDetail(idAndDetail);\n\n      this.setState( { folderIDForNoteCreation: null });\n    }\n  }\n\n\n  listenDeleteNote(e) {\n\n    e.preventDefault();\n\n    let noteID = parseInt(e.target.getAttribute( 'data-noteid' ));\n\n    this.props.deleteNote(noteID);\n\n  }\n\n\n  render() {\n\n    return (\n\n      <div>\n \n        <div className = \"tableTopNavbar\">\n\n          <button\n\n            type = 'submit'\n            onClick = { this.onButtonClick }\n            className = \"logOutButton\"\n\n          >Logout\n\n          </button>\n\n          <Link\n\n            to = '/account'\n            className = \"accountLink\"\n\n          >\n\n            <span className = \"accountLinkText\">Account</span>\n\n          </Link>\n\n        </div>\n\n        <h1 className = \"tableTopHeading\">Table Top</h1>\n\n        <div className = \"container\">\n\n          <div className = \"sidebar\">\n\n            <form\n\n              onSubmit = { this.handleSubmit }\n              className = \"sidebarInput\"\n\n            >\n\n              <input\n\n                type = \"text\"\n                name = \"folder\"\n                placeholder = \"Enter folder name\"\n                className = \"folderNameInput\"\n                aria-required=\"true\"\n                aria-label=\"Folder name input\"\n\n              />\n\n              <input\n\n                className = \"buttonToHide\"\n                type = \"submit\"\n                value = \"Submit\"\n                aria-required=\"true\"\n                aria-label=\"Folder name input button\"\n\n              />\n\n            </form>\n\n            < FolderNotePair\n\n              createNote = { this.createNote }\n              editFolder = { this.editFolder }\n              editNote = { this.editNote }\n              deleteFolder = { this.deleteFolder }\n              items = { this.props.foldersAndNotesToLoad }\n              onNoteClick = { this.onNoteClick }\n\n            / >\n\n          </div>\n\n          <div className = \"textview\">\n\n            {\n\n              this.state.folderIDForNoteCreation !== null\n\n              &&\n\n                < Note\n\n                  noteDetail = { this.combineFolderIDNoteDetail }\n\n                / >\n\n            }\n\n            { this.noteName() }\n\n            { this.noteContent() }\n\n          </div>\n\n        </div>\n\n      </div>\n\n    );\n  }\n}\n","import React from 'react';\n\nimport { Link } from 'react-router-dom';\n\nimport './account.css';\n\n\nexport default class Account extends React.Component {\n\n  constructor(props) {\n\n    super(props);\n\n    this.onSubmitForm = this.onSubmitForm.bind(this);\n\n  }\n\n\n  onSubmitForm(e) {\n\n    e.preventDefault();\n\n    let items = [];\n\n    items.push(e.target.nameToAdd.value);\n\n    items.push(e.target.pwToAdd.value);\n\n    e.target.nameToAdd.value = '';\n\n    e.target.pwToAdd.value = '';\n\n    this.props.onAddItems(items);\n\n  }\n\n\n  render() {\n\n    return (\n\n      <div >\n\n        <div className = \"accountNavbar\" >\n\n          <form\n\n            onSubmit = { this.onSubmitForm }\n            className = \"nonMobileAccountFormOne\"\n\n          >\n\n            <div className = \"nonMobileAccountFormTwo\">\n\n              <input\n\n                type = \"text\"\n                placeholder = 'User Name'\n                name = 'nameToAdd'\n                className = \"accountInputOne\"\n                aria-required=\"true\"\n                aria-label=\"User name for account deletion\"\n                aria-describedby=\"accountInstructions\"\n\n              />\n\n              <input\n\n                type = \"text\"\n                placeholder = 'Password123!@#'\n                name = 'pwToAdd'\n                className = \"accountInputTwo\"\n                aria-required=\"true\"\n                aria-label=\"Password for account deletion\"\n                aria-describedby=\"accountInstructions\"\n\n              />\n\n              <button type = 'submit'>Enter</button>\n\n            </div>\n\n          </form>\n\n          <Link to = '/tableTop' className = \"tableTopLink\" >\n\n            <span className = \"tableTopLinkText\">Table Top</span>\n\n          </Link>\n\n        </div>\n\n        <div className = \"accountPage\">\n\n          <h1 className = \"accountHeading\">Account</h1>\n\n          <p\n\n            className = \"accountInstructions\"\n            id = \"accountInstructions\"\n\n          >Enter the username and password to delete the account.</p>\n\n          <form\n\n            onSubmit = { this.onSubmitForm }\n            className = \"mobileAccountForm\"\n\n          >\n\n            <div className = \"mobileAccountInputs\">\n\n              <input\n\n                type = \"text\"\n                placeholder = 'User Name'\n                name = 'nameToAdd'\n                className = \"inputOne\"\n                aria-required=\"true\"\n                aria-label=\"User name for mobile account deletion\"\n                aria-describedby=\"accountInstructions\"\n\n              />\n\n              <input\n\n                type = \"text\"\n                placeholder = 'Password123!@#'\n                name = 'pwToAdd'\n                className = \"inputTwo\"\n                aria-required=\"true\"\n                aria-label=\"Password for mobile account deletion\"\n                aria-describedby=\"accountInstructions\"\n\n              />\n\n              <button\n\n                type = 'submit'\n                className = 'accountButton'\n\n              >Enter</button>\n\n            </div>\n\n          </form>\n\n        </div>\n\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\n\nimport { Route, Switch, withRouter, Redirect } from 'react-router-dom';\n\nimport Landing from './landing/landing.js';\n\nimport Registration from './registration/registration.js';\n\nimport TableTop from './tableTop/tableTop.js';\n\nimport Account from './account/account.js';\n\nimport './App.css';\n\n\nconst baseURL = 'http://localhost:8000';\n//const baseURL = 'https://radiant-thicket-42053.herokuapp.com'\n\n\nclass App extends React.Component {\n\n  constructor(props) {\n\n    super(props);\n\n    this.state = {\n\n      unsuccessfulLogin: undefined,\n\n      password: undefined,\n\n      authToken: undefined,\n\n      accountDeleted: false,\n\n      registrationMessage: undefined,\n\n      foldersAndNotes: undefined,\n\n      notesToView: undefined,\n\n      folderCreated: false,\n\n      folderEdited: false,\n\n      folderDeleted: false,\n\n      noteCreated: false,\n\n      noteViewed: false,\n\n      notes: undefined,\n\n      noteEdited: false,\n\n      noteNameEdited: false,\n\n      noteDeleted: false,\n\n      userID: undefined\n\n    };\n\n\n    this.handleLogin = this.handleLogin.bind(this);\n\n    this.handleRegistration = this.handleRegistration.bind(this);\n\n    this.handleAccount = this.handleAccount.bind(this);\n\n    this.handleTableTopReady = this.handleTableTopReady.bind(this);\n\n    this.handleCreateFolder = this.handleCreateFolder.bind(this);\n\n    this.handleEditFolder = this.handleEditFolder.bind(this);\n\n    this.handleDeleteFolder = this.handleDeleteFolder.bind(this);\n\n    this.handleCreateNote = this.handleCreateNote.bind(this);\n\n    this.handleViewNote = this.handleViewNote.bind(this);\n\n    this.handleEditNote = this.handleEditNote.bind(this);\n\n    this.handleEditNoteName = this.handleEditNoteName.bind(this);\n\n    this.handleDeleteNote = this.handleDeleteNote.bind(this);\n\n    this.handleLogout = this.handleLogout.bind(this);\n\n  }\n\n\n  makeBasicAuthToken(userName, password) {\n\n    return window.btoa(`${userName}:${password}`);\n\n  }\n\n\n  handleLogin(data) {\n\n    let authToken = this.makeBasicAuthToken(data[0], data[1]);\n\n    let url = `${baseURL}/login`;\n\n    let userName = data[0];\n\n    let password = data[1];\n\n    if (userName === \"\" || password === \"\") {\n\n      console.log(\"Must enter user information\");\n\n    } else {\n\n      let postBody = { userName, password, authToken };\n\n      let options = {\n\n        method: 'POST',\n\n        body: JSON.stringify(postBody),\n\n        headers: {\n\n          \"Content-Type\": \"application/json\"\n\n        }\n\n      };\n\n\n      fetch(url, options)\n\n        .then( res => {\n\n          if (!res.ok) {\n\n            alert('Invalid login credentials. Please try again.');\n\n            this.setState( { unsuccessfulLogin: true });\n\n          } else {\n\n            this.setState({\n\n              authToken: authToken,\n\n            });\n\n            this.props.history.push( \"/tableTop\" );\n\n          }\n\n        })\n\n    }\n  }\n\n\n  handleLogout() {\n\n    this.setState({\n\n      authToken: undefined\n\n    });\n  }\n\n\n  handleRegistration(data) {\n\n    let url = `${baseURL}/registration`;\n\n    let userName = data[0];\n\n    let password = data[1];\n\n    let postBody = {userName, password};\n\n    let options = {\n\n      method: 'POST',\n\n      body: JSON.stringify(postBody),\n\n      headers: {\n\n        \"Content-Type\": \"application/json\"\n\n      }\n\n    };\n\n\n    fetch(url, options)\n\n      .then ( res => {\n\n        if (res.ok) {\n\n          this.setState({\n\n            registrationMessage: data.registrationMessage,\n\n          });\n\n        } else {\n\n          throw new Error('An error occurred');\n\n        }\n\n      })\n\n      .catch( err => {\n\n        console.log(err);\n\n        alert('Invalid registration credentials. Please try again.');\n\n      })\n  }\n\n\n\n  handleCreateFolder(data) {\n\n    let url = `${baseURL}/createFolder`;\n\n    let folderName = data[0];\n\n    let postBody = {folderName};\n\n    let options = {\n\n      method: 'POST',\n\n      body: JSON.stringify(postBody),\n\n      headers: {\n\n        \"Authorization\": this.state.authToken,\n\n        \"Content-Type\": \"application/json\"\n\n      }\n\n    };\n\n\n\n    fetch(url, options)\n\n      .then ( res => {\n\n        if (!res.ok) {\n\n          throw new Error('An error occurred');\n\n        }\n\n        return res.json();\n\n      })\n\n      .then( data => {\n\n        this.setState({\n\n          folderCreated: true\n\n        });\n\n        this.handleTableTopReady();\n\n      })\n  }\n\n\n  handleEditFolder(newFolderName, folderID) {\n\n    let postBody = {newFolderName, folderID};\n\n    let url = `${baseURL}/editFolder/${folderID}`;\n\n    let options = {\n\n      method: 'PATCH',\n\n      body: JSON.stringify(postBody),\n\n      headers: {\n\n        \"Content-Type\": \"application/json\"\n\n      }\n\n    };\n\n\n\n    fetch(url, options)\n\n      .then (res => {\n\n        if (!res.ok) {\n\n          throw new Error('An error occurred');\n\n        }\n\n        return res.json();\n\n      })\n\n      .then(data =>\n\n        {\n\n        this.setState({\n\n          folderEdited: true\n\n        })\n\n        this.handleTableTopReady();\n\n      })\n  }\n\n\n  handleDeleteFolder(folderID) {\n\n    let postBody = {folderID};\n\n    let url = `${baseURL}/deleteFolder`;\n\n    let options = {\n\n      method: 'DELETE',\n\n      body: JSON.stringify(postBody),\n\n      headers: {\n\n        \"Content-Type\": \"application/json\"\n\n      }\n\n    };\n\n\n\n    fetch(url, options)\n\n      .then (res => {\n\n        if (!res.ok) {\n\n          throw new Error('An error occurred')\n\n        }\n\n        return res.json()\n\n      })\n\n      .then( data =>\n\n        {\n\n        this.setState({\n\n          folderDeleted: true\n\n        })\n\n        this.handleTableTopReady();\n\n      })\n  }\n\n\n\n  handleCreateNote(data) {\n\n    let folderID = data[0];\n\n    let noteName = data[1][0];\n\n    let noteText = data[1][1];\n\n    let postBody = {folderID, noteName, noteText};\n\n    let url = `${baseURL}/createNote`;\n\n    let options = {\n\n      method: 'POST',\n\n      body: JSON.stringify(postBody),\n\n      headers: {\n\n        \"Content-Type\": \"application/json\"\n\n      }\n\n    };\n\n\n\n    fetch(url, options)\n\n      .then ( res => {\n\n        if (!res.ok) {\n\n          throw new Error('An error occurred');\n\n        }\n\n        return res.json();\n\n      })\n\n      .then( data =>\n\n        {\n\n        this.setState({\n\n          noteCreated: true\n\n        })\n\n        this.handleTableTopReady();\n\n      })\n   }\n\n\n  handleViewNote(noteName) {\n\n    let url = `${baseURL}/viewNote/${noteName}`;\n\n    let options = {\n\n      method: 'GET',\n\n      headers: {\n\n        \"Content-Type\": \"application/json\"\n\n      }\n\n    };\n\n\n\n    fetch(url, options)\n\n      .then ( res => {\n\n        if (!res.ok) {\n\n          throw new Error('An error occurred');\n\n        }\n\n        return res.json();\n\n      })\n\n      .then(data =>\n\n        {\n\n        this.setState({\n\n          noteToView: data[0]\n\n        })\n\n        this.handleTableTopReady();\n\n      })\n  }\n\n\n\n  handleEditNote(noteText, noteID) {\n\n    let postBody = {noteText, noteID};\n\n    let url = `${baseURL}/editNote`;\n\n    let options = {\n\n      method: 'PATCH',\n\n      body: JSON.stringify(postBody),\n\n      headers: {\n\n        \"Content-Type\": \"application/json\"\n\n      }\n\n    };\n\n    fetch(url, options)\n\n      .then ( res => {\n\n        if (!res.ok) {\n\n          throw new Error('An error occurred');\n\n        }\n\n        return res.json()\n\n      })\n\n      .then( data => {\n\n        this.setState({\n\n          noteEdited: true\n\n        })\n\n        this.handleTableTopReady();\n\n      })\n  }\n\n\n\n  handleEditNoteName(noteName, noteID) {\n\n    let postBody = {noteName, noteID};\n\n    let url = `${baseURL}/editNoteName`;\n\n    let options = {\n\n      method: 'PATCH',\n\n      body: JSON.stringify(postBody),\n\n      headers: {\n\n        \"Content-Type\": \"application/json\"\n\n      }\n\n    };\n\n    fetch(url, options)\n\n      .then ( res => {\n\n        if (!res.ok) {\n\n          throw new Error('An error occurred');\n\n        }\n\n        return res.json()\n\n      })\n\n      .then( data => {\n\n        this.setState({\n\n          noteNameEdited: true\n\n        })\n\n        this.handleTableTopReady();\n\n      })\n  }\n\n\n\n\n  handleDeleteNote(noteID) {\n\n    let postBody = {noteID};\n\n    let url = `${baseURL}/deleteNote`;\n\n    let options = {\n\n      method: 'DELETE',\n\n      body: JSON.stringify(postBody),\n\n      headers: {\n\n        \"Content-Type\": \"application/json\"\n\n      }\n\n    };\n\n\n\n    fetch(url, options)\n\n      .then ( res => {\n\n        if (!res.ok) {\n\n          throw new Error('An error occurred');\n\n        }\n\n        return res.json();\n\n      })\n\n      .then( data => {\n\n        this.setState({\n\n          noteDeleted: data.noteDeleted\n\n        });\n\n        this.handleTableTopReady();\n\n      })\n  }\n\n\n\n\n\n  handleAccount(data) {\n\n    let url = `${baseURL}/deleteAccount`;\n\n    let userName = data[0];\n\n    let password = data[1];\n\n    let postBody = {userName, password};\n\n    let options = {\n\n      method: 'DELETE',\n\n      body: JSON.stringify(postBody),\n\n      headers: {\n\n        \"Content-Type\": \"application/json\"\n\n      }\n\n    };\n\n\n\n    fetch(url, options)\n\n      .then ( res => {\n\n        if (!res.ok) {\n\n          throw new Error('An error occurred');\n\n        } else {\n\n          return res.json();\n\n        }\n\n      })\n\n      .then( data => {\n\n        this.setState({\n\n          accountDeleted: true,\n\n          authToken: undefined\n\n        })\n\n        this.handleLogout();\n\n      })\n\n      .catch( err => {\n\n        alert('Invalid login credentials. Please try again.');\n\n      })\n  }\n\n\n\n\n  handleTableTopReady() {\n\n    let url = `${baseURL}/tableTopReady`;\n\n    let options = {\n\n      method: 'GET',\n\n      headers: {\n\n        \"Authorization\": this.state.authToken,\n\n        \"Content-Type\": \"application/json\"\n\n      }\n\n    };\n\n\n\n    fetch(url, options)\n\n      .then ( res => {\n\n        if (!res.ok) {\n\n          throw new Error('An error occurred');\n\n        }\n\n        return res.json();\n\n      })\n\n      .then( data => {\n\n        this.setState( {\n\n          foldersAndNotes: data\n\n        })\n      })\n  }\n\n\n\n  render() {\n\n    if (this.state.authToken === undefined) {\n\n      return (\n\n        <div className = 'App'>\n\n          <Switch>\n\n              <Route path = '/registration' >\n\n                <Registration onAddItems = { this.handleRegistration } />\n\n              </Route>\n\n\n              <Route >\n\n                <Landing\n\n                  onAddItems = { this.handleLogin }\n                  unsuccessfulLogin =  { this.state.unsuccessfulLogin }\n\n                />\n\n              </Route>\n\n            </Switch>\n\n        </div>\n      )\n\n    } else {\n\n      return (\n\n        <div className='App'>\n\n          <Switch>\n\n            <Route\n\n              exact path = '/account'\n              render = { ({ history }) => {\n\n                return <Account onAddItems = { this.handleAccount } />\n\n                        }} >\n\n            </Route>\n\n\n            <Route>\n\n              <TableTop\n\n                listenForTableTopReady = { this.handleTableTopReady }\n                foldersAndNotesToLoad = { this.state.foldersAndNotes }\n                createFolder = { this.handleCreateFolder }\n                editFolder = { this.handleEditFolder }\n                deleteFolder = { this.handleDeleteFolder }\n                noteDetail = { this.handleCreateNote }\n                viewNote = { this.handleViewNote }\n                noteToView = { this.state.noteToView }\n                editNote = { this.handleEditNote }\n                editNoteName = {this.handleEditNoteName }\n                deleteNote = { this.handleDeleteNote }\n                onLogoutClick = { this.handleLogout } />\n\n            </Route>\n\n          </Switch>\n\n        </div>\n\n      )\n    }\n  }\n}\n\nexport default withRouter(App)\n","import React from 'react';\n\nimport ReactDOM from 'react-dom';\n\nimport { BrowserRouter } from 'react-router-dom';\n\nimport './index.css';\n\nimport App from './App';\n\n\nReactDOM.render(\n\n  <BrowserRouter>\n\n    <App />\n\n  </BrowserRouter>,\n\n  document.getElementById('root')\n\n);\n"],"sourceRoot":""}